

	- Create a platform called community.haqnow.com
		○ Users should be able to upload hundreds or thousands of documents at once
		○ User should be able to search them by words in the document
		○ Users should be able to use AI to ask questions about the documents
		- USERS SHOULD BE ABLE OT CONTROL WHO CAN SEE UPLOADED DOCUMENTS BY USER (user has to specify email addresses that can see, edit, view, etc. but, there should be an "everyone" option as well)
		○ Administrator should be able to add remove users. Users should use MFA.
		○ Users should be able to make notes or add comments on the documents online
		○ You shares should also be able to easily redact portions of the document and export portions of the documents as PDF
		○ The uploaded documents should be stripped of metadata, regardless of which format the document is uploaded in
		○ User should be able to edit the documents live together and be able to see the changes two documents live together
		○ User should be able to highlight sections of the document
		○ User should be able to add tags to documents and then search documents by tags as well
		- use Exoscale to build the infrastructure using terraform - the API key for exoscale is in .env file
		- users should be able to click at any place in the document and add Comments
		- users should be able to redact any portion of the document - and when that redacted document is exported, it should be exported as PDF but the text in that PDF should still be searchable, but, without the redacted portions
		- in the document preview section, the document should appear in full 300 dpi resolution
		- incorporate testing of all features into playwright and make sure to review and fix bugs that show up via playwright
		- users should be able to define groups would would have list of email addresses and they should also be able to share documents with those groups
		- users should be able to create documents - it should come with a markdown editor - documents should be able to reference other uploaded documents using links - these created documents should also appear in the dashboard

User should be able to redact PDF documents. All documents that are uploaded should turn into standard format, including images. All documents that are uploaded should be OCR. User should be able to redact documents using GUI and export sections of the document in PDF VIA GUI. Users should be able to ask questions about the document using AI (with RAG and Ollama behind the scenes) and also be able to search documents by words and phrases.

This app must have these common Document Management System features:
- Full-Text Search & Metadata Tagging Quickly find documents by keyword, tags, or properties.
- Version Control Keep history of edits, restore older versions, and prevent overwrite conflicts.
- Audit Trails Track who accessed or changed a document and when.
- Document Capture & Import - Easy uploading from computers, scanners, camera.
- Workflow Automation - Route documents for review, approval, and notifications without manual tracking.
- Collaboration - Comments, annotations, co-authoring, and secure sharing.

Comment and Redaction features:
Comment features:
- when you click on Comment Button, you should be able to click on anywhere in the document
- a comment icon should appear in that place in that document
- user should be able to put in text relating to that comment
- user should be able to delete the comment which should make the comment icon disappear
- user should be able to edit the comment
- multiple users should be able to edit comments (whomever the document is shared with)

Redact features:
- when user clicks on the redact button, user should be able to create a square anywhere in the Document should be create a black filled in square
- user should be able to make multiple black squares until they click on redact again which would toggle being able to make the black squares
- users should be able to click on the black squarea and move them
- users should be able to click on the black squares and a delete or rezize options should also appear
- when user exports a document, the black squares should be burned into the document to make sure nothing underneath them is visible



Got it. Before proceeding, here are 20 focused questions to lock down the spec and avoid rework:

### Scope and viewer behavior
1) What document types must support comments/redactions now (PDF only, images, others)?
2) What viewer library are we using (e.g., PDF.js) and are pages rendered via canvas, SVG, or DOM?
3) Should coordinates be stored as page-relative percentages (recommended) or absolute pixels at a specific zoom?

### Comment model and UX
4) Are comments always tied to a specific page and a point on that page, or can they be global?
5) Do you want single comments only, or threads (replies), with resolve/close status?
6) Should comments support mentions (@user), and if so, what user search API exists?
7) What’s the exact delete/edit behavior: hard delete vs soft delete; edit history needed?
8) Who can see comments: all users with access to the doc, or only explicit collaborators/roles?

### Redaction behavior
9) Do we support rectangle redactions only, or also text-selection redaction?
10) Should redactions be fully opaque black boxes only, or configurable (color/opacity/border)?
11) Should redactions be toggle-visible in the viewer (show/hide overlays) separate from the exported burn-in?
12) Who can create/move/delete redactions (all collaborators vs specific roles)?

### Collaboration and persistence
13) Do you need real-time sync (live updates via WebSocket) for comments/redactions, or is save-on-action with polling acceptable?
14) What backend endpoints or schemas already exist for storing comments/redactions? If none, should we design them?
15) How should conflicts be handled if two users edit/move/delete the same item simultaneously (last-write-wins, optimistic concurrency, locks)?

### Export and versioning
16) Where should burn-in occur: client-side only, server-side only, or both (preferred: server-side authoritative PDF flattening)?
17) Should exports create immutable redacted versions while keeping the original unredacted file, with version history/audit log?
18) Do you require an audit trail (who created/edited/deleted comments/redactions and when)?

### Edge cases and UX polish
19) How should comments/redactions behave with zoom and page rotation (must they stay anchored and scale/rotate with the page)?
20) What are the minimum acceptance criteria for tests (e2e for placement/move/delete, export fidelity, multi-user edits), and do you have sample docs to use in CI?

Reply with answers (even brief bullets are fine), and I’ll implement accordingly.

1. all documents - they are all turned into tiles/images anyways - they should all work equally well 2. I don't know 3. whatever is most accurate - forget about different zoom level - just use one image per page only regardless of zoom level - that page should always be 300 dpi - and do the redaction at the pixel level - then there would be no need to worry about percentages or zoom levels 3. always tied at the pixel level in the document 4. they should be tied to a specific pixel in the document 5. single comment to start - may hadd threads later 6. no mentions 7. hard delete - no history 8. all users with access to the doc 9. rectangle redaction only 10. black only 11. yes 12. all collaborators 13. real-time sync for both comments and redactions 14. I don't know - please check 15. whoever starts editing first gets control 16. burn-in should occur when exporting documents to pdf 17. yes - exports should be immutable redacted versions 18. no 19. they should be tied to the document at the pixel level - so rotation of document should rotate the redation too 20. use @Ministry of Health _ ontario.ca.pdf and @Public Health - Region of Durham.pdf as test documents


update the application so that we can do local development. Local development should use exoscale database and exoscale sos, but, compute will run locally. This way we can improve the testing speed. Make sure start-local.sh is updated so that local dev version can be started using that.



resize and delete was working in one of thesechore(deploy): sync local changes before server deploy
main-salman
main-salman
committed
15 minutes ago
·
chore(deploy): sync local changes before server deploy
main-salman
main-salman
committed
20 minutes ago
·
