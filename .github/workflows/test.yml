name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        cd backend
        poetry install --no-interaction --no-root
        
    - name: Set up test environment
      run: |
        cd backend
        cp .env.example .env || echo "No .env.example found, creating basic .env"
        cat > .env << EOF
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY=test-secret-key-for-ci
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        REDIS_URL=redis://localhost:6379/0
        AWS_ACCESS_KEY_ID=test
        AWS_SECRET_ACCESS_KEY=test
        AWS_REGION=us-east-1
        S3_BUCKET=test-bucket
        EOF
        
    - name: Run tests
      run: |
        cd backend
        poetry run pytest -v --tb=short
        
    - name: Check test coverage
      run: |
        cd backend
        poetry run pytest --cov=app --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Install dependencies
      run: |
        cd backend
        poetry install --no-interaction --no-root
        
    - name: Run linting
      run: |
        cd backend
        poetry run black --check .
        poetry run isort --check-only .
        
  documentation-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Check if README.md needs update
      run: |
        # Check if any Python or Terraform files were changed
        if git diff --name-only HEAD~1 HEAD | grep -E '\.(py|tf)$'; then
          echo "Code files were changed. Checking if README.md was updated..."
          if ! git diff --name-only HEAD~1 HEAD | grep -q "README.md"; then
            echo "⚠️  WARNING: Code files were modified but README.md was not updated."
            echo "Please update README.md with new features and architecture changes."
            echo "This is a reminder, not a failure."
          else
            echo "✅ README.md was updated along with code changes."
          fi
        else
          echo "No code files were changed, README.md update not required."
        fi
